//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTileView;

    public static Entitas.IMatcher<GameEntity> TileView {
        get {
            if (_matcherTileView == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TileView);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTileView = matcher;
            }

            return _matcherTileView;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AGame.Code.Gameplay.Features.Tiles.TileViewComponent tileView { get { return (AGame.Code.Gameplay.Features.Tiles.TileViewComponent)GetComponent(GameComponentsLookup.TileView); } }
    public AGame.Code.Gameplay.Features.Tiles.Behaviours.TileView TileView { get { return tileView.Value; } }
    public bool hasTileView { get { return HasComponent(GameComponentsLookup.TileView); } }

    public GameEntity AddTileView(AGame.Code.Gameplay.Features.Tiles.Behaviours.TileView newValue) {
        var index = GameComponentsLookup.TileView;
        var component = (AGame.Code.Gameplay.Features.Tiles.TileViewComponent)CreateComponent(index, typeof(AGame.Code.Gameplay.Features.Tiles.TileViewComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTileView(AGame.Code.Gameplay.Features.Tiles.Behaviours.TileView newValue) {
        var index = GameComponentsLookup.TileView;
        var component = (AGame.Code.Gameplay.Features.Tiles.TileViewComponent)CreateComponent(index, typeof(AGame.Code.Gameplay.Features.Tiles.TileViewComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTileView() {
        RemoveComponent(GameComponentsLookup.TileView);
        return this;
    }
}
