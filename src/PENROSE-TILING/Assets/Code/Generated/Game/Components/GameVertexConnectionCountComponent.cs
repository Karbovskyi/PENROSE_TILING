//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherVertexConnectionCount;

    public static Entitas.IMatcher<GameEntity> VertexConnectionCount {
        get {
            if (_matcherVertexConnectionCount == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.VertexConnectionCount);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherVertexConnectionCount = matcher;
            }

            return _matcherVertexConnectionCount;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AGame.Code.Gameplay.Features.Tiles.VertexConnectionCount vertexConnectionCount { get { return (AGame.Code.Gameplay.Features.Tiles.VertexConnectionCount)GetComponent(GameComponentsLookup.VertexConnectionCount); } }
    public int VertexConnectionCount { get { return vertexConnectionCount.Value; } }
    public bool hasVertexConnectionCount { get { return HasComponent(GameComponentsLookup.VertexConnectionCount); } }

    public GameEntity AddVertexConnectionCount(int newValue) {
        var index = GameComponentsLookup.VertexConnectionCount;
        var component = (AGame.Code.Gameplay.Features.Tiles.VertexConnectionCount)CreateComponent(index, typeof(AGame.Code.Gameplay.Features.Tiles.VertexConnectionCount));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceVertexConnectionCount(int newValue) {
        var index = GameComponentsLookup.VertexConnectionCount;
        var component = (AGame.Code.Gameplay.Features.Tiles.VertexConnectionCount)CreateComponent(index, typeof(AGame.Code.Gameplay.Features.Tiles.VertexConnectionCount));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveVertexConnectionCount() {
        RemoveComponent(GameComponentsLookup.VertexConnectionCount);
        return this;
    }
}
