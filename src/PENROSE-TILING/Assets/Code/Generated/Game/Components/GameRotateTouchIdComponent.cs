//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotateTouchId;

    public static Entitas.IMatcher<GameEntity> RotateTouchId {
        get {
            if (_matcherRotateTouchId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotateTouchId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotateTouchId = matcher;
            }

            return _matcherRotateTouchId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AGame.Code.Gameplay.Features.DragAndDrop.RotateTouchId rotateTouchId { get { return (AGame.Code.Gameplay.Features.DragAndDrop.RotateTouchId)GetComponent(GameComponentsLookup.RotateTouchId); } }
    public int RotateTouchId { get { return rotateTouchId.Value; } }
    public bool hasRotateTouchId { get { return HasComponent(GameComponentsLookup.RotateTouchId); } }

    public GameEntity AddRotateTouchId(int newValue) {
        var index = GameComponentsLookup.RotateTouchId;
        var component = (AGame.Code.Gameplay.Features.DragAndDrop.RotateTouchId)CreateComponent(index, typeof(AGame.Code.Gameplay.Features.DragAndDrop.RotateTouchId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRotateTouchId(int newValue) {
        var index = GameComponentsLookup.RotateTouchId;
        var component = (AGame.Code.Gameplay.Features.DragAndDrop.RotateTouchId)CreateComponent(index, typeof(AGame.Code.Gameplay.Features.DragAndDrop.RotateTouchId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRotateTouchId() {
        RemoveComponent(GameComponentsLookup.RotateTouchId);
        return this;
    }
}
