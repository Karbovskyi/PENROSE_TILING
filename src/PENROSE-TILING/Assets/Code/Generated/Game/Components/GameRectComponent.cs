//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRect;

    public static Entitas.IMatcher<GameEntity> Rect {
        get {
            if (_matcherRect == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Rect);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRect = matcher;
            }

            return _matcherRect;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AGame.Code.Infrastructure.Ecs.Features.RectComponent rect { get { return (AGame.Code.Infrastructure.Ecs.Features.RectComponent)GetComponent(GameComponentsLookup.Rect); } }
    public UnityEngine.Rect Rect { get { return rect.Value; } }
    public bool hasRect { get { return HasComponent(GameComponentsLookup.Rect); } }

    public GameEntity AddRect(UnityEngine.Rect newValue) {
        var index = GameComponentsLookup.Rect;
        var component = (AGame.Code.Infrastructure.Ecs.Features.RectComponent)CreateComponent(index, typeof(AGame.Code.Infrastructure.Ecs.Features.RectComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRect(UnityEngine.Rect newValue) {
        var index = GameComponentsLookup.Rect;
        var component = (AGame.Code.Infrastructure.Ecs.Features.RectComponent)CreateComponent(index, typeof(AGame.Code.Infrastructure.Ecs.Features.RectComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRect() {
        RemoveComponent(GameComponentsLookup.Rect);
        return this;
    }
}
